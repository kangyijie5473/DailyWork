#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>

#define TRUE 1
#define FALSE 0
#define CODE  2
#define JIEMA 3
#define MAXLEN 256
typedef struct {
    int parent;
    int leftChild;
    int rightChild;
    float weight;
}node;
FILE *deCpsFp;
void getChar();
int fileToBuffer();
unsigned char fileWeight[256];
char deFile[MAXLEN];
char zeroNum;
int root;
int effectiveChar;
char compressFile[MAXLEN];
FILE *compressfp;
char *codeBuffer;
node treeNode[512];
FILE *chooseFile();
int getWeight(FILE *fd);
int creatTree();
void reverseCode(char huffmanCode[], int pos);
void findMinWeight(int n, int *node1, int  *node2);
void getCode(unsigned char i, char huffmanCode[]);
int spiltBuffer();
unsigned char ctoi(char buffer[]);


int creatTree()
{
	for(int i = MAXLEN; i < MAXLEN+effectiveChar-1; i++){
		int node1,node2;
		findMinWeight(i-1, &node1, &node2);
		treeNode[i].weight = treeNode[node1].weight + treeNode[node2].weight;
		treeNode[i].leftChild = node1;
		treeNode[i].rightChild = node2;
		treeNode[node1].parent = i; 
		treeNode[node2].parent = i;		
	}
    root = MAXLEN+effectiveChar-2;
    return TRUE;
}
void print()
{
    for(int i = 0; i < MAXLEN*2-1; i++){
        printf("NO.%d %c weight%f leftChild%d rightChild%d parent %d \n",
               i,i,treeNode[i].weight,treeNode[i].leftChild,
               treeNode[i].rightChild, treeNode[i].parent);
    }
}
void getCode(unsigned char key, char huffmanCode[])
{
    int pos = 0;
    int  temp;
    int i = key;
    assert(treeNode[i].parent != 0);
    while(treeNode[i].parent != 0){
        temp = treeNode[i].parent;
        if(treeNode[temp].leftChild == i){
            huffmanCode[pos++] = '0';
        }else{
            huffmanCode[pos++] = '1';
        }
        i = temp;
    }
    huffmanCode[pos] = '\0';
    reverseCode(huffmanCode,pos-1);
}

void reverseCode(char huffmanCode[], int pos)
{
    char *h,*t;
    char temp;
    h = &huffmanCode[0];
    t = &huffmanCode[pos];
    while(h != t && h < t){
        temp = *h;
        *h = *t;
        *t = temp;
        h++;
        t--;
    }
}

FILE *chooseFile()
{
    static FILE *fp;
    char buffer[MAXLEN];
    char *key;
    system("clear");
    printf("\n\n\n\n\t\t\t\t请输入你想要压缩的文件\n\t\t\t\t");
    key = fgets(buffer, MAXLEN-1, stdin);
    buffer[strlen(buffer) - 1] = '\0';
    strcat(deFile, buffer);
    strcat(deFile, ".decode");
    strcat(compressFile, buffer);
    strcat(compressFile, ".code");
    fp = fopen(buffer, "r+");
    assert(fp != NULL);
    return fp;
}

int getWeight(FILE *fp)
{
    float count = 0;
    unsigned char temp;

    while(feof(fp) == 0){
        temp = fgetc(fp);
        count += 1;
        treeNode[temp].weight += 1;
    }
    for(int i = 0; i < MAXLEN; i++){
        treeNode[i].weight = treeNode[i].weight/count;
        fileWeight[i] = (unsigned char)treeNode[i].weight*256;
        if(treeNode[i].weight != 0)
            effectiveChar++;
    }
    assert(feof(fp) != 0); 
    return TRUE;
}
void codeToBuffer(FILE *fp)
{
    char huffmanCode[20];
    unsigned char temp ;
    codeBuffer = (char *)malloc(sizeof(char)*500000);
    fseek(fp, 0, SEEK_SET);
    assert(feof(fp) == 0); 
    while(feof(fp) == 0){
        temp = fgetc(fp);
        getCode(temp,huffmanCode);
        strcat(codeBuffer,huffmanCode);
        memset(huffmanCode, 0, 20);
    }

}
void findMinWeight(int n, int *node1, int  *node2)
{
    float temp = 1.0;	
	for(int i = n; i >= 1; i--){
		if(treeNode[i].parent == 0 && 
		   treeNode[i].weight <= temp &&
           treeNode[i].weight != 0){
			*node1 = i;
			temp = treeNode[i].weight;
		}
	}
	temp = 1.0;
	for(int i = n; i >= 1; i--){
		if(treeNode[i].parent == 0 && 
		   i != *node1 &&
		   treeNode[i].weight <= temp &&
           treeNode[i].weight != 0){
			*node2 = i;
			temp = treeNode[i].weight;
		}
	}
}

void itoc(unsigned char key,char buffer[])
{
    unsigned char  temp;
    temp = key;
    char ch;
    for(int i = 7; i >= 0; i--){
        if((ch = temp&1) == 0){
            buffer[i] = '0';
        }else {
            buffer[i] = '1';
        }
        key = key >> 1;
        temp = key;
    }
    buffer[8] = '\0';
}
void decompress()
{
    deCpsFp = fopen(compressFile, "r+");
    assert(deCpsFp != NULL);

    fseek(deCpsFp, -1, SEEK_END);
    fread(&zeroNum,1,1,deCpsFp);
    fseek(deCpsFp,0,SEEK_SET);

    fileToBuffer();
    getChar();
}

int fileToBuffer()
{
    codeBuffer = (char *)malloc(sizeof(char) * 500000);
    memset(codeBuffer, 0, 10);
    unsigned char key;
    char buffer[9];
    int i;
    while(1){
        if((i = fread(&key,1,1,deCpsFp)) != 1){
            break;
        }
        itoc(key,buffer);
        strcat(codeBuffer,buffer);
        memset(buffer, 0, 9);
    }
}
void getChar()
{
    int i = root;
    char *p = &codeBuffer[0];
    char key;
    FILE *Fp;
    Fp = fopen(deFile,"w+"); 

    int index = zeroNum;
    char *d = &codeBuffer[strlen(codeBuffer) - 1];
    d = d - 7 - index;
    *d = '\0';
    int temp = 0; 
    while(*p != '\0'){
        i = root;
        while(treeNode[i].leftChild != 0 && treeNode[i].rightChild != 0){
            if(*p == '0'){
                i = treeNode[i].leftChild;
                p++;
            }else{
                i = treeNode[i].rightChild;
                p++;
            }
        }
        if(i == 255)
            break;
        key = i;
        fprintf(Fp,"%c",key);
        temp++;
    }
    fclose(Fp);

}

unsigned char ctoi(char buffer[])
{
    unsigned char key = 0;

    for(int i = 0; i <= 7; i++){
        key += (buffer[i]-'0')*pow(2,7-i);
    }
    return key;

}

void saveTree()
{
    compressfp = fopen(compressFile,"w+");
}

void compressChar(char buffer[], int count)
{
    unsigned char key;
    key = ctoi(buffer);
    fprintf(compressfp,"%c",key);
}

int spiltBuffer()
{
    char buffer[9];
    char *p = &codeBuffer[0];
    FILE * temp;
    temp = fopen("code","w");
    fprintf(temp,"%s",codeBuffer);
    char *q = p;
    int count = 0;
    while(*p != '\0'){
        p++;
        count++;
        if(count == 8){
            memcpy(buffer, q, 8);
            buffer[8] = '\0';
            compressChar(buffer,8);
            memset(buffer, 0, 8);
            q = q + 8;
            count = 0;
        }
    }
    memcpy(buffer, q, count);
    for(int i = count; i < 8; i++){
        buffer[i] = '0';
    }
    zeroNum = 8 - count;
    compressChar(buffer,count);

    fprintf(compressfp,"%c",zeroNum);
    fclose(compressfp);
}

int main(void)
{
    FILE *fp;char temp[123];
    fp = chooseFile();
    getWeight(fp);
    printf("\t\t\t\t读取文件成功！\n");
    creatTree();
    saveTree();
    codeToBuffer(fp);
    spiltBuffer();
    printf("\t\t\t\t编码成功！压缩文件为%s\n",compressFile);
    free(codeBuffer);
    printf("\t\t\t\t请输入要解压缩的文件\n\t\t\t\t");
    scanf("%s",temp);
    decompress();
    printf("\t\t\t\t解压缩成功! 解压后文件为%s\n",deFile);
}


